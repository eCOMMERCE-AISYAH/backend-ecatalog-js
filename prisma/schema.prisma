generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid()) @db.VarChar(100)
  name        String?       @db.VarChar(100)
  username    String        @unique @db.VarChar(50)
  password    String?       @db.VarChar(255)
  address     String?       @db.VarChar(500)
  phoneNumber String?       @db.VarChar(20)
  role        Role          @default(GUEST)
  token       String?       @db.VarChar(255)
  CartProduct CartProduct[]
  Order       Order[]
}

enum Role {
  GUEST
  USER
  ADMIN
}

model Product {
  id            String         @id @default(uuid()) @db.VarChar(100)
  name          String         @db.VarChar(200)
  slug          String         @unique @db.VarChar(200)
  description   String         @db.Text
  stock         Int            @db.SmallInt
  price         Int
  subCategoryId String?        @db.VarChar(100)
  subCategory   SubCategory?   @relation(fields: [subCategoryId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  images        ProductImage[]
  CartProduct   CartProduct[]
}

model ProductImage {
  id        String   @id @default(uuid()) @db.VarChar(100)
  image     String   @db.VarChar(100)
  productId String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model SubCategory {
  id         String    @id @default(uuid()) @db.VarChar(100)
  name       String    @db.VarChar(100)
  slug       String    @unique @db.VarChar(100)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String?   @db.VarChar(100)
  category   Category? @relation(fields: [categoryId], references: [id])
  products   Product[]
}

model Category {
  id            String        @id @default(uuid()) @db.VarChar(100)
  name          String        @db.VarChar(100)
  slug          String        @unique @db.VarChar(100)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]
}

model CartProduct {
  id        String   @id @default(uuid()) @db.VarChar(100)
  quantity  Int      @db.SmallInt
  notes     String?
  userId    String   @db.VarChar(100)
  productId String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id           String         @id @default(uuid()) @db.VarChar(100)
  invoice      String         @unique @db.VarChar(255)
  name         String         @db.VarChar(100)
  phoneNumber  String         @db.VarChar(20)
  address      String?        @db.VarChar(200)
  notes        String?        @db.Text
  totalPrice   Int
  status       Status         @default(PROSES)
  description  String?        @db.VarChar(255)
  userId       String         @db.VarChar(100)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  OrderHistory OrderHistory[]
}

// model OrderItem {
//   id        String   @id @default(uuid()) @db.VarChar(100)
//   productId String   @db.VarChar(100)
//   orderId   String   @db.VarChar(100)
//   quantity  Int      @db.SmallInt
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   product   Product  @relation(fields: [productId], references: [id])
//   order     Order    @relation(fields: [orderId], references: [id])
// }

model OrderHistory {
  id           String @id @default(uuid()) @db.VarChar(100)
  productName  String @db.VarChar(100)
  category     String @db.VarChar(50)
  subCategory  String @db.VarChar(50)
  quantity     Int    @db.SmallInt
  productImage String @db.VarChar(100)
  orderId      String @db.VarChar(100)
  order        Order  @relation(fields: [orderId], references: [id])
}

enum Status {
  BATAL
  PROSES
  SUKSES
}
